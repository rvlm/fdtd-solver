#!/usr/bin/env python
import argparse
import collections
import os
import sys
import re
import jinja2

template = """/* AUTOGENERATED, DO NOT EDIT */
#include <string.h>

{% for f in resource_files %}
static char resource_file_{{f.basename|s}}[] = {
    {{f.code}}
    0
};
{% endfor %}

static char const* resource_contents[] = {
{% for f in resource_files %}
    "{{f.basename|e}}",
{% endfor %}
    0
};

int {{prefix}}_resources_count(void) {
    return {{resource_files | length}};
}

char const** {{prefix}}_resources_list(void) {
    return resource_contents;
}

size_t {{prefix}}_resources_file_size(const char* resname) {
    {% for f in resource_files %}
    if (strcmp(resname, "{{f.basename|e}}") == 0)
        return {{f.binary|length}};

    {% endfor %}
    return 0;
}

char* {{prefix}}_resources_file_data(const char* resname) {
    {% for f in resource_files %}
    if (strcmp(resname, "{{f.basename|e}}") == 0)
        return resource_file_{{f.basename|s}};

    {% endfor %}
    return NULL;
}
"""

parser = argparse.ArgumentParser(description='Resource file generator')
parser.add_argument('--prefix',
                    metavar='PREFIX',
                    help='prefix for generated C functions')
parser.add_argument('--output',
                    metavar='OUTFILE',
                    help='C code file with generated arrays of data')
parser.add_argument('files', metavar='FILE', nargs='+')

# Will show usage and exit in case arguments cannot be parsed.
arguments = parser.parse_args()

def escape_c_string(str):
    return re.sub(r"([\"'])", r"\\\1", str)

def sanitize_filename(filename):
    return re.sub(r"[^\d\w]", "_", filename)

def slurp_binary(filename):
    with open(filename, mode="rb") as f:
         return f.read()

def format_c_array(str):
    result = ""
    count  = 0
    for ch in str:
        result += "'\\x%02x'" % ord(ch)
        result += ", "
        count  += 1

        if count % 10 == 0:
            result += "\n"

    return result

ResourceFile = collections.namedtuple("ResourceFile", "basename, binary, code")

resource_files = []
for f in arguments.files:
    basename = os.path.basename(f)
    binary   = slurp_binary(f)
    code     = format_c_array(binary)
    resource_files.append(ResourceFile(basename, binary, code))

with open(arguments.output, mode="w") as fout:
    env = jinja2.Environment(lstrip_blocks=True, trim_blocks=True)
    env.filters['s'] = sanitize_filename
    env.filters['e'] = escape_c_string

    tmpl = env.from_string(template)
    fout.write(tmpl.render(prefix=arguments.prefix,
                           resource_files=resource_files))
